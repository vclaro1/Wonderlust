<h1><%= @trip.name%></h1>
<div class="row" id="pin_show">
<div class="panel panel-default">
  <div class="panel-body">
    <div class="row">
      <div class="col-md-6">
        <div class="btn-group pull-right">
          <%= link_to "Add Location", new_trip_location_path(trip_id: @trip.id), 'data-no-turbolink' => true%>
          <%= link_to "Edit Trip", edit_trip_path %>
          <%= link_to 'Delete Trip', [@trip, @location], method: :delete, data: { confirm: 'Are you sure?' } %> </p>
        </div>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">
  var locs = [];
  window.onload = function() {
    if(!window.location.hash) {
        window.location = window.location + '#loaded';
        window.location.reload();
    }
}
</script>
<div style='width: 800px;'>
  <div id="map" style='width: 800px; height: 400px;'></div>
</div>
<%=javascript_include_tag "//maps.google.com/maps/api/js?key=AIzaSyDz8mE8BZQh68cH9foLPNTvlM6dMrdQMfo"%>
<%=javascript_include_tag "//cdn.rawgit.com/mahnunchik/markerclustererplus/master/dist/markerclusterer.min.js"%>
<%=javascript_include_tag '//cdn.rawgit.com/printercu/google-maps-utility-library-v3-read-only/master/infobox/src/infobox_packed.js'%>
<table class="table">
  <thead>
    <tr>
      <th>Name</th>
      <th>Days to stay</th>
      <th>Interests</th>
      <th>Travel Mode</th>
    </tr>
  </thead>
  <tbody>
  <% @locations.each do |loc| %>
    <tr>
      <td><%= loc.address %></td>
      <td><%= loc.days %></td>
      <td>aqui iran los intereses del lugar</td>
      <td><%=loc.travel_mode%></td>
      <td><%= link_to 'Show', [@trip, loc]%></td>
      <td><%= link_to 'Delete', [@trip, loc], method: :delete, data: { confirm: 'Are you sure?' } %></td>
    </tr>
    <script type="text/javascript">
      locs.push([<%=loc.latitude%>, <%=loc.longitude%>, String("<%=loc.travel_mode%>")]) 
    </script>
    <% end %>
  </tbody>
</table> <!-- only if you need custom infoboxes -->
<script type="text/javascript">
  $( document ).ready(
  function() {
  handler = Gmaps.build('Google');
  var directions = [];
  function renderDirections(result) {
  var directionsRenderer = new google.maps.DirectionsRenderer;
  directionsRenderer.setMap(handler.getMap());
  directionsRenderer.setDirections(result);
  directionsRenderer.setOptions( { suppressMarkers: true } );
}
  var directionsService = new google.maps.DirectionsService();
  handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
    function requestDirections(request) {
        directionsService.route(request, function(result) {
          renderDirections(result);
        });
      }
    locs.forEach(function(element) {
        markers = handler.addMarkers([
              {
                "lat": element[0],
                "lng": element[1],
                "picture": {
                  "url": "http://people.mozilla.com/~faaborg/files/shiretoko/firefoxIcon/firefox-32.png",
                  "width":  32,
                  "height": 32
                },
                "infowindow": "hello!"
              }
            ]); 
    });
    for (i = 0; i <= locs.length - 2; i++) {
      var color;
      var r = Math.floor(Math.random() * 255);
      var g = Math.floor(Math.random() * 255);
      var b = Math.floor(Math.random() * 255);
      color= "rgb("+r+" ,"+g+","+ b+")"; 
      if (locs[i+1][2] == "FLIGHT") {
        var polylines = handler.addPolylines(
              [
                [
                  {lat: locs[i][0], lng: locs[i][1]},
                  {lat: locs[i+1][0], lng: locs[i+1][1]}
                ]
              ]
            );
        handler.bounds.extendWith(polylines);
        handler.fitMapToBounds();
          }
      else {
        var travel;
        if (locs[i+1][2] == "WALKING") {
                  travel = google.maps.TravelMode.WALKING;
                } else if (locs[i+1][2] == "BICYCLING") {
                  travel = google.maps.TravelMode.BICYCLING;
                } else if (locs[i+1][2] == "TRANSIT") {
                  travel = google.maps.TravelMode.TRANSIT;
                } else {
                  travel = google.maps.TravelMode.DRIVING;
                }
          var request = {
              origin:      new google.maps.LatLng(locs[i][0], locs[i][1]),
              destination: new google.maps.LatLng(locs[i+1][0], locs[i+1][1]),
              travelMode:  travel
          };
          requestDirections(request);
      }
          }
    handler.fitMapToBounds();
  });
  }
    );
</script>
